// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 12 Dec 2023 23:18:54 CET.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ug

/*
#cgo LDFLAGS: -L../ugui/build -lugui
#include "../ugui/ugui.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

var FONT_4X6 UG_FONT
var FONT_5X8 UG_FONT
var FONT_5X12 UG_FONT
var FONT_6X8 UG_FONT
var FONT_6X10 UG_FONT
var FONT_7X12 UG_FONT
var FONT_8X8 UG_FONT
var FONT_8X12 UG_FONT
var FONT_8X14 UG_FONT
var FONT_10X16 UG_FONT
var FONT_12X16 UG_FONT
var FONT_12X20 UG_FONT
var FONT_16X26 UG_FONT
var FONT_22X36 UG_FONT
var FONT_24X40 UG_FONT
var FONT_32X53 UG_FONT

// UG_Init function as declared in ugui/ugui.c:5084
func UG_Init(G *UG_GUI, P UG_Init_Callback, X UG_S16, Y UG_S16) UG_S16 {
	cG, cGAllocMap := G.PassRef()
	cP, cPAllocMap := P.PassValue()
	cX, cXAllocMap := (C.UG_S16)(X), cgoAllocsUnknown
	cY, cYAllocMap := (C.UG_S16)(Y), cgoAllocsUnknown
	__ret := C.UG_Init(cG, cP, cX, cY)
	runtime.KeepAlive(cYAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cPAllocMap)
	runtime.KeepAlive(cGAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_SelectGUI function as declared in ugui/ugui.c:5134
func UG_SelectGUI(G *UG_GUI) UG_S16 {
	cG, cGAllocMap := G.PassRef()
	__ret := C.UG_SelectGUI(cG)
	runtime.KeepAlive(cGAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_FontIdSelect function as declared in ugui/ugui.c:5140
func UG_FontIdSelect(Font_id FONT_ID) {
	cFont_id, cFont_idAllocMap := (C.FONT_ID)(Font_id), cgoAllocsUnknown
	C.UG_FontIdSelect(cFont_id)
	runtime.KeepAlive(cFont_idAllocMap)
}

// UG_FontSelect function as declared in ugui/ugui.c:5149
func UG_FontSelect(Font *UG_FONT) {
	cFont, cFontAllocMap := Font.PassRef()
	C.UG_FontSelect(cFont)
	runtime.KeepAlive(cFontAllocMap)
}

// UG_GetFont function as declared in ugui/ugui.c:5154
func UG_GetFont(Font_id FONT_ID) *UG_FONT {
	cFont_id, cFont_idAllocMap := (C.FONT_ID)(Font_id), cgoAllocsUnknown
	__ret := C.UG_GetFont(cFont_id)
	runtime.KeepAlive(cFont_idAllocMap)
	__v := NewUG_FONTRef(unsafe.Pointer(__ret))
	return __v
}

// UG_FillScreen function as declared in ugui/ugui.c:5194
func UG_FillScreen(C UG_COLOR) {
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_FillScreen(cC)
	runtime.KeepAlive(cCAllocMap)
}

// UG_FillFrame function as declared in ugui/ugui.c:5199
func UG_FillFrame(X1 UG_S16, Y1 UG_S16, X2 UG_S16, Y2 UG_S16, C UG_COLOR) {
	cX1, cX1AllocMap := (C.UG_S16)(X1), cgoAllocsUnknown
	cY1, cY1AllocMap := (C.UG_S16)(Y1), cgoAllocsUnknown
	cX2, cX2AllocMap := (C.UG_S16)(X2), cgoAllocsUnknown
	cY2, cY2AllocMap := (C.UG_S16)(Y2), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_FillFrame(cX1, cY1, cX2, cY2, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cY2AllocMap)
	runtime.KeepAlive(cX2AllocMap)
	runtime.KeepAlive(cY1AllocMap)
	runtime.KeepAlive(cX1AllocMap)
}

// UG_FillRoundFrame function as declared in ugui/ugui.c:5231
func UG_FillRoundFrame(X1 UG_S16, Y1 UG_S16, X2 UG_S16, Y2 UG_S16, R UG_S16, C UG_COLOR) {
	cX1, cX1AllocMap := (C.UG_S16)(X1), cgoAllocsUnknown
	cY1, cY1AllocMap := (C.UG_S16)(Y1), cgoAllocsUnknown
	cX2, cX2AllocMap := (C.UG_S16)(X2), cgoAllocsUnknown
	cY2, cY2AllocMap := (C.UG_S16)(Y2), cgoAllocsUnknown
	cR, cRAllocMap := (C.UG_S16)(R), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_FillRoundFrame(cX1, cY1, cX2, cY2, cR, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cRAllocMap)
	runtime.KeepAlive(cY2AllocMap)
	runtime.KeepAlive(cX2AllocMap)
	runtime.KeepAlive(cY1AllocMap)
	runtime.KeepAlive(cX1AllocMap)
}

// UG_DrawMesh function as declared in ugui/ugui.c:5281
func UG_DrawMesh(X1 UG_S16, Y1 UG_S16, X2 UG_S16, Y2 UG_S16, C UG_COLOR) {
	cX1, cX1AllocMap := (C.UG_S16)(X1), cgoAllocsUnknown
	cY1, cY1AllocMap := (C.UG_S16)(Y1), cgoAllocsUnknown
	cX2, cX2AllocMap := (C.UG_S16)(X2), cgoAllocsUnknown
	cY2, cY2AllocMap := (C.UG_S16)(Y2), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawMesh(cX1, cY1, cX2, cY2, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cY2AllocMap)
	runtime.KeepAlive(cX2AllocMap)
	runtime.KeepAlive(cY1AllocMap)
	runtime.KeepAlive(cX1AllocMap)
}

// UG_DrawFrame function as declared in ugui/ugui.c:5307
func UG_DrawFrame(X1 UG_S16, Y1 UG_S16, X2 UG_S16, Y2 UG_S16, C UG_COLOR) {
	cX1, cX1AllocMap := (C.UG_S16)(X1), cgoAllocsUnknown
	cY1, cY1AllocMap := (C.UG_S16)(Y1), cgoAllocsUnknown
	cX2, cX2AllocMap := (C.UG_S16)(X2), cgoAllocsUnknown
	cY2, cY2AllocMap := (C.UG_S16)(Y2), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawFrame(cX1, cY1, cX2, cY2, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cY2AllocMap)
	runtime.KeepAlive(cX2AllocMap)
	runtime.KeepAlive(cY1AllocMap)
	runtime.KeepAlive(cX1AllocMap)
}

// UG_DrawRoundFrame function as declared in ugui/ugui.c:5315
func UG_DrawRoundFrame(X1 UG_S16, Y1 UG_S16, X2 UG_S16, Y2 UG_S16, R UG_S16, C UG_COLOR) {
	cX1, cX1AllocMap := (C.UG_S16)(X1), cgoAllocsUnknown
	cY1, cY1AllocMap := (C.UG_S16)(Y1), cgoAllocsUnknown
	cX2, cX2AllocMap := (C.UG_S16)(X2), cgoAllocsUnknown
	cY2, cY2AllocMap := (C.UG_S16)(Y2), cgoAllocsUnknown
	cR, cRAllocMap := (C.UG_S16)(R), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawRoundFrame(cX1, cY1, cX2, cY2, cR, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cRAllocMap)
	runtime.KeepAlive(cY2AllocMap)
	runtime.KeepAlive(cX2AllocMap)
	runtime.KeepAlive(cY1AllocMap)
	runtime.KeepAlive(cX1AllocMap)
}

// UG_DrawPixel function as declared in ugui/ugui.c:5344
func UG_DrawPixel(X0 UG_S16, Y0 UG_S16, C UG_COLOR) {
	cX0, cX0AllocMap := (C.UG_S16)(X0), cgoAllocsUnknown
	cY0, cY0AllocMap := (C.UG_S16)(Y0), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawPixel(cX0, cY0, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cY0AllocMap)
	runtime.KeepAlive(cX0AllocMap)
}

// UG_DrawCircle function as declared in ugui/ugui.c:5349
func UG_DrawCircle(X0 UG_S16, Y0 UG_S16, R UG_S16, C UG_COLOR) {
	cX0, cX0AllocMap := (C.UG_S16)(X0), cgoAllocsUnknown
	cY0, cY0AllocMap := (C.UG_S16)(Y0), cgoAllocsUnknown
	cR, cRAllocMap := (C.UG_S16)(R), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawCircle(cX0, cY0, cR, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cRAllocMap)
	runtime.KeepAlive(cY0AllocMap)
	runtime.KeepAlive(cX0AllocMap)
}

// UG_FillCircle function as declared in ugui/ugui.c:5386
func UG_FillCircle(X0 UG_S16, Y0 UG_S16, R UG_S16, C UG_COLOR) {
	cX0, cX0AllocMap := (C.UG_S16)(X0), cgoAllocsUnknown
	cY0, cY0AllocMap := (C.UG_S16)(Y0), cgoAllocsUnknown
	cR, cRAllocMap := (C.UG_S16)(R), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_FillCircle(cX0, cY0, cR, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cRAllocMap)
	runtime.KeepAlive(cY0AllocMap)
	runtime.KeepAlive(cX0AllocMap)
}

// UG_DrawArc function as declared in ugui/ugui.c:5424
func UG_DrawArc(X0 UG_S16, Y0 UG_S16, R UG_S16, S UG_U8, C UG_COLOR) {
	cX0, cX0AllocMap := (C.UG_S16)(X0), cgoAllocsUnknown
	cY0, cY0AllocMap := (C.UG_S16)(Y0), cgoAllocsUnknown
	cR, cRAllocMap := (C.UG_S16)(R), cgoAllocsUnknown
	cS, cSAllocMap := (C.UG_U8)(S), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawArc(cX0, cY0, cR, cS, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cSAllocMap)
	runtime.KeepAlive(cRAllocMap)
	runtime.KeepAlive(cY0AllocMap)
	runtime.KeepAlive(cX0AllocMap)
}

// UG_DrawLine function as declared in ugui/ugui.c:5468
func UG_DrawLine(X1 UG_S16, Y1 UG_S16, X2 UG_S16, Y2 UG_S16, C UG_COLOR) {
	cX1, cX1AllocMap := (C.UG_S16)(X1), cgoAllocsUnknown
	cY1, cY1AllocMap := (C.UG_S16)(Y1), cgoAllocsUnknown
	cX2, cX2AllocMap := (C.UG_S16)(X2), cgoAllocsUnknown
	cY2, cY2AllocMap := (C.UG_S16)(Y2), cgoAllocsUnknown
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_DrawLine(cX1, cY1, cX2, cY2, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cY2AllocMap)
	runtime.KeepAlive(cX2AllocMap)
	runtime.KeepAlive(cY1AllocMap)
	runtime.KeepAlive(cX1AllocMap)
}

// UG_PutString function as declared in ugui/ugui.c:5521
func UG_PutString(X UG_S16, Y UG_S16, Str string) {
	cX, cXAllocMap := (C.UG_S16)(X), cgoAllocsUnknown
	cY, cYAllocMap := (C.UG_S16)(Y), cgoAllocsUnknown
	cStr, cStrAllocMap := unpackPCharString(Str)
	C.UG_PutString(cX, cY, cStr)
	runtime.KeepAlive(cStrAllocMap)
	runtime.KeepAlive(cYAllocMap)
	runtime.KeepAlive(cXAllocMap)
}

// UG_PutChar function as declared in ugui/ugui.c:5553
func UG_PutChar(Chr byte, X UG_S16, Y UG_S16, Fc UG_COLOR, Bc UG_COLOR) {
	cChr, cChrAllocMap := (C.char)(Chr), cgoAllocsUnknown
	cX, cXAllocMap := (C.UG_S16)(X), cgoAllocsUnknown
	cY, cYAllocMap := (C.UG_S16)(Y), cgoAllocsUnknown
	cFc, cFcAllocMap := (C.UG_COLOR)(Fc), cgoAllocsUnknown
	cBc, cBcAllocMap := (C.UG_COLOR)(Bc), cgoAllocsUnknown
	C.UG_PutChar(cChr, cX, cY, cFc, cBc)
	runtime.KeepAlive(cBcAllocMap)
	runtime.KeepAlive(cFcAllocMap)
	runtime.KeepAlive(cYAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cChrAllocMap)
}

// UG_ConsolePutString function as declared in ugui/ugui.c:5558
func UG_ConsolePutString(Str string) {
	cStr, cStrAllocMap := unpackPCharString(Str)
	C.UG_ConsolePutString(cStr)
	runtime.KeepAlive(cStrAllocMap)
}

// UG_ConsoleSetArea function as declared in ugui/ugui.c:5593
func UG_ConsoleSetArea(Xs UG_S16, Ys UG_S16, Xe UG_S16, Ye UG_S16) {
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	C.UG_ConsoleSetArea(cXs, cYs, cXe, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cXsAllocMap)
}

// UG_ConsoleSetForecolor function as declared in ugui/ugui.c:5601
func UG_ConsoleSetForecolor(C UG_COLOR) {
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_ConsoleSetForecolor(cC)
	runtime.KeepAlive(cCAllocMap)
}

// UG_ConsoleSetBackcolor function as declared in ugui/ugui.c:5606
func UG_ConsoleSetBackcolor(C UG_COLOR) {
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_ConsoleSetBackcolor(cC)
	runtime.KeepAlive(cCAllocMap)
}

// UG_SetForecolor function as declared in ugui/ugui.c:5611
func UG_SetForecolor(C UG_COLOR) {
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_SetForecolor(cC)
	runtime.KeepAlive(cCAllocMap)
}

// UG_SetBackcolor function as declared in ugui/ugui.c:5616
func UG_SetBackcolor(C UG_COLOR) {
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	C.UG_SetBackcolor(cC)
	runtime.KeepAlive(cCAllocMap)
}

// UG_GetXDim function as declared in ugui/ugui.c:5621
func UG_GetXDim() UG_S16 {
	__ret := C.UG_GetXDim()
	__v := (UG_S16)(__ret)
	return __v
}

// UG_GetYDim function as declared in ugui/ugui.c:5626
func UG_GetYDim() UG_S16 {
	__ret := C.UG_GetYDim()
	__v := (UG_S16)(__ret)
	return __v
}

// UG_FontSetHSpace function as declared in ugui/ugui.c:5631
func UG_FontSetHSpace(S UG_U16) {
	cS, cSAllocMap := (C.UG_U16)(S), cgoAllocsUnknown
	C.UG_FontSetHSpace(cS)
	runtime.KeepAlive(cSAllocMap)
}

// UG_FontSetVSpace function as declared in ugui/ugui.c:5636
func UG_FontSetVSpace(S UG_U16) {
	cS, cSAllocMap := (C.UG_U16)(S), cgoAllocsUnknown
	C.UG_FontSetVSpace(cS)
	runtime.KeepAlive(cSAllocMap)
}

// UG_DriverRegister function as declared in ugui/ugui.c:6412
func UG_DriverRegister(_type UG_U8, Driver unsafe.Pointer) {
	c_type, c_typeAllocMap := (C.UG_U8)(_type), cgoAllocsUnknown
	cDriver, cDriverAllocMap := Driver, cgoAllocsUnknown
	C.UG_DriverRegister(c_type, cDriver)
	runtime.KeepAlive(cDriverAllocMap)
	runtime.KeepAlive(c_typeAllocMap)
}

// UG_DriverEnable function as declared in ugui/ugui.c:6420
func UG_DriverEnable(_type UG_U8) {
	c_type, c_typeAllocMap := (C.UG_U8)(_type), cgoAllocsUnknown
	C.UG_DriverEnable(c_type)
	runtime.KeepAlive(c_typeAllocMap)
}

// UG_DriverDisable function as declared in ugui/ugui.c:6429
func UG_DriverDisable(_type UG_U8) {
	c_type, c_typeAllocMap := (C.UG_U8)(_type), cgoAllocsUnknown
	C.UG_DriverDisable(c_type)
	runtime.KeepAlive(c_typeAllocMap)
}

// UG_Update function as declared in ugui/ugui.c:6441
func UG_Update() {
	C.UG_Update()
}

// UG_WaitForUpdate function as declared in ugui/ugui.c:6494
func UG_WaitForUpdate() {
	C.UG_WaitForUpdate()
}

// UG_DrawBMP function as declared in ugui/ugui.c:6505
func UG_DrawBMP(Xp UG_S16, Yp UG_S16, Bmp *UG_BMP) {
	cXp, cXpAllocMap := (C.UG_S16)(Xp), cgoAllocsUnknown
	cYp, cYpAllocMap := (C.UG_S16)(Yp), cgoAllocsUnknown
	cBmp, cBmpAllocMap := Bmp.PassRef()
	C.UG_DrawBMP(cXp, cYp, cBmp)
	runtime.KeepAlive(cBmpAllocMap)
	runtime.KeepAlive(cYpAllocMap)
	runtime.KeepAlive(cXpAllocMap)
}

// UG_TouchUpdate function as declared in ugui/ugui.c:6546
func UG_TouchUpdate(Xp UG_S16, Yp UG_S16, State UG_U8) {
	cXp, cXpAllocMap := (C.UG_S16)(Xp), cgoAllocsUnknown
	cYp, cYpAllocMap := (C.UG_S16)(Yp), cgoAllocsUnknown
	cState, cStateAllocMap := (C.UG_U8)(State), cgoAllocsUnknown
	C.UG_TouchUpdate(cXp, cYp, cState)
	runtime.KeepAlive(cStateAllocMap)
	runtime.KeepAlive(cYpAllocMap)
	runtime.KeepAlive(cXpAllocMap)
}

// UG_FocusUpdate function as declared in ugui/ugui.c:6553
func UG_FocusUpdate(Move UG_U8) {
	cMove, cMoveAllocMap := (C.UG_U8)(Move), cgoAllocsUnknown
	C.UG_FocusUpdate(cMove)
	runtime.KeepAlive(cMoveAllocMap)
}

// UG_PressFocused function as declared in ugui/ugui.c:6558
func UG_PressFocused() {
	C.UG_PressFocused()
}

// UG_WindowCreate function as declared in ugui/ugui.c:6567
func UG_WindowCreate(Wnd *UG_WINDOW, Objlst []UG_OBJECT, Objcnt UG_U8, Cb UG_Message_Callback) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cObjlst, cObjlstAllocMap := unpackArgSUG_OBJECT(Objlst)
	cObjcnt, cObjcntAllocMap := (C.UG_U8)(Objcnt), cgoAllocsUnknown
	cCb, cCbAllocMap := Cb.PassValue()
	__ret := C.UG_WindowCreate(cWnd, cObjlst, cObjcnt, cCb)
	runtime.KeepAlive(cCbAllocMap)
	runtime.KeepAlive(cObjcntAllocMap)
	packSUG_OBJECT(Objlst, cObjlst)
	runtime.KeepAlive(cObjlstAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowDelete function as declared in ugui/ugui.c:6625
func UG_WindowDelete(Wnd *UG_WINDOW) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowDelete(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowShow function as declared in ugui/ugui.c:6646
func UG_WindowShow(Wnd *UG_WINDOW) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowShow(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowHide function as declared in ugui/ugui.c:6659
func UG_WindowHide(Wnd *UG_WINDOW) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowHide(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowResize function as declared in ugui/ugui.c:6690
func UG_WindowResize(Wnd *UG_WINDOW, Xs UG_S16, Ys UG_S16, Xe UG_S16, Ye UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	__ret := C.UG_WindowResize(cWnd, cXs, cYs, cXe, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cXsAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowAlert function as declared in ugui/ugui.c:6731
func UG_WindowAlert(Wnd *UG_WINDOW) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowAlert(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetForeColor function as declared in ugui/ugui.c:6740
func UG_WindowSetForeColor(Wnd *UG_WINDOW, Fc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cFc, cFcAllocMap := (C.UG_COLOR)(Fc), cgoAllocsUnknown
	__ret := C.UG_WindowSetForeColor(cWnd, cFc)
	runtime.KeepAlive(cFcAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetBackColor function as declared in ugui/ugui.c:6751
func UG_WindowSetBackColor(Wnd *UG_WINDOW, Bc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cBc, cBcAllocMap := (C.UG_COLOR)(Bc), cgoAllocsUnknown
	__ret := C.UG_WindowSetBackColor(cWnd, cBc)
	runtime.KeepAlive(cBcAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleTextColor function as declared in ugui/ugui.c:6762
func UG_WindowSetTitleTextColor(Wnd *UG_WINDOW, C UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleTextColor(cWnd, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleColor function as declared in ugui/ugui.c:6773
func UG_WindowSetTitleColor(Wnd *UG_WINDOW, C UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleColor(cWnd, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleInactiveTextColor function as declared in ugui/ugui.c:6784
func UG_WindowSetTitleInactiveTextColor(Wnd *UG_WINDOW, C UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleInactiveTextColor(cWnd, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleInactiveColor function as declared in ugui/ugui.c:6795
func UG_WindowSetTitleInactiveColor(Wnd *UG_WINDOW, C UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cC, cCAllocMap := (C.UG_COLOR)(C), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleInactiveColor(cWnd, cC)
	runtime.KeepAlive(cCAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleText function as declared in ugui/ugui.c:6806
func UG_WindowSetTitleText(Wnd *UG_WINDOW, Str string) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cStr, cStrAllocMap := unpackPCharString(Str)
	__ret := C.UG_WindowSetTitleText(cWnd, cStr)
	runtime.KeepAlive(cStrAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleTextFont function as declared in ugui/ugui.c:6818
func UG_WindowSetTitleTextFont(Wnd *UG_WINDOW, Font_id FONT_ID) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cFont_id, cFont_idAllocMap := (C.FONT_ID)(Font_id), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleTextFont(cWnd, cFont_id)
	runtime.KeepAlive(cFont_idAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleTextHSpace function as declared in ugui/ugui.c:6837
func UG_WindowSetTitleTextHSpace(Wnd *UG_WINDOW, Hs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cHs, cHsAllocMap := (C.UG_S8)(Hs), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleTextHSpace(cWnd, cHs)
	runtime.KeepAlive(cHsAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleTextVSpace function as declared in ugui/ugui.c:6848
func UG_WindowSetTitleTextVSpace(Wnd *UG_WINDOW, Vs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cVs, cVsAllocMap := (C.UG_S8)(Vs), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleTextVSpace(cWnd, cVs)
	runtime.KeepAlive(cVsAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleTextAlignment function as declared in ugui/ugui.c:6859
func UG_WindowSetTitleTextAlignment(Wnd *UG_WINDOW, Align UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cAlign, cAlignAllocMap := (C.UG_U8)(Align), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleTextAlignment(cWnd, cAlign)
	runtime.KeepAlive(cAlignAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetTitleHeight function as declared in ugui/ugui.c:6870
func UG_WindowSetTitleHeight(Wnd *UG_WINDOW, Height UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cHeight, cHeightAllocMap := (C.UG_U8)(Height), cgoAllocsUnknown
	__ret := C.UG_WindowSetTitleHeight(cWnd, cHeight)
	runtime.KeepAlive(cHeightAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetXStart function as declared in ugui/ugui.c:6882
func UG_WindowSetXStart(Wnd *UG_WINDOW, Xs UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	__ret := C.UG_WindowSetXStart(cWnd, cXs)
	runtime.KeepAlive(cXsAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetYStart function as declared in ugui/ugui.c:6893
func UG_WindowSetYStart(Wnd *UG_WINDOW, Ys UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	__ret := C.UG_WindowSetYStart(cWnd, cYs)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetXEnd function as declared in ugui/ugui.c:6904
func UG_WindowSetXEnd(Wnd *UG_WINDOW, Xe UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	__ret := C.UG_WindowSetXEnd(cWnd, cXe)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetYEnd function as declared in ugui/ugui.c:6915
func UG_WindowSetYEnd(Wnd *UG_WINDOW, Ye UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	__ret := C.UG_WindowSetYEnd(cWnd, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowSetStyle function as declared in ugui/ugui.c:6926
func UG_WindowSetStyle(Wnd *UG_WINDOW, Style UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cStyle, cStyleAllocMap := (C.UG_U8)(Style), cgoAllocsUnknown
	__ret := C.UG_WindowSetStyle(cWnd, cStyle)
	runtime.KeepAlive(cStyleAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowGetForeColor function as declared in ugui/ugui.c:6954
func UG_WindowGetForeColor(Wnd *UG_WINDOW) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetForeColor(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_WindowGetBackColor function as declared in ugui/ugui.c:6964
func UG_WindowGetBackColor(Wnd *UG_WINDOW) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetBackColor(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_WindowGetTitleTextColor function as declared in ugui/ugui.c:6974
func UG_WindowGetTitleTextColor(Wnd *UG_WINDOW) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleTextColor(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_WindowGetTitleColor function as declared in ugui/ugui.c:6984
func UG_WindowGetTitleColor(Wnd *UG_WINDOW) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleColor(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_WindowGetTitleInactiveTextColor function as declared in ugui/ugui.c:6994
func UG_WindowGetTitleInactiveTextColor(Wnd *UG_WINDOW) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleInactiveTextColor(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_WindowGetTitleInactiveColor function as declared in ugui/ugui.c:7004
func UG_WindowGetTitleInactiveColor(Wnd *UG_WINDOW) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleInactiveColor(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_WindowGetTitleText function as declared in ugui/ugui.c:7014
func UG_WindowGetTitleText(Wnd *UG_WINDOW) string {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleText(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// UG_WindowGetTitleTextFont function as declared in ugui/ugui.c:7024
func UG_WindowGetTitleTextFont(Wnd *UG_WINDOW) *UG_FONT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleTextFont(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := NewUG_FONTRef(unsafe.Pointer(__ret))
	return __v
}

// UG_WindowGetTitleTextHSpace function as declared in ugui/ugui.c:7034
func UG_WindowGetTitleTextHSpace(Wnd *UG_WINDOW) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleTextHSpace(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_WindowGetTitleTextVSpace function as declared in ugui/ugui.c:7044
func UG_WindowGetTitleTextVSpace(Wnd *UG_WINDOW) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleTextVSpace(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_WindowGetTitleTextAlignment function as declared in ugui/ugui.c:7054
func UG_WindowGetTitleTextAlignment(Wnd *UG_WINDOW) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleTextAlignment(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_WindowGetTitleHeight function as declared in ugui/ugui.c:7064
func UG_WindowGetTitleHeight(Wnd *UG_WINDOW) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetTitleHeight(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_WindowGetXStart function as declared in ugui/ugui.c:7074
func UG_WindowGetXStart(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetXStart(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetYStart function as declared in ugui/ugui.c:7084
func UG_WindowGetYStart(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetYStart(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetXEnd function as declared in ugui/ugui.c:7094
func UG_WindowGetXEnd(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetXEnd(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetYEnd function as declared in ugui/ugui.c:7104
func UG_WindowGetYEnd(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetYEnd(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetStyle function as declared in ugui/ugui.c:7114
func UG_WindowGetStyle(Wnd *UG_WINDOW) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetStyle(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_WindowGetArea function as declared in ugui/ugui.c:7124
func UG_WindowGetArea(Wnd *UG_WINDOW, A *UG_AREA) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cA, cAAllocMap := A.PassRef()
	__ret := C.UG_WindowGetArea(cWnd, cA)
	runtime.KeepAlive(cAAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_WindowGetInnerWidth function as declared in ugui/ugui.c:7148
func UG_WindowGetInnerWidth(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetInnerWidth(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetOuterWidth function as declared in ugui/ugui.c:7163
func UG_WindowGetOuterWidth(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetOuterWidth(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetInnerHeight function as declared in ugui/ugui.c:7175
func UG_WindowGetInnerHeight(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetInnerHeight(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_WindowGetOuterHeight function as declared in ugui/ugui.c:7193
func UG_WindowGetOuterHeight(Wnd *UG_WINDOW) UG_S16 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	__ret := C.UG_WindowGetOuterHeight(cWnd)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S16)(__ret)
	return __v
}

// UG_ButtonCreate function as declared in ugui/ugui.c:7386
func UG_ButtonCreate(Wnd *UG_WINDOW, Btn *UG_BUTTON, Id UG_U8, Xs UG_S16, Ys UG_S16, Xe UG_S16, Ye UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cBtn, cBtnAllocMap := Btn.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	__ret := C.UG_ButtonCreate(cWnd, cBtn, cId, cXs, cYs, cXe, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cXsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cBtnAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonDelete function as declared in ugui/ugui.c:7429
func UG_ButtonDelete(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonDelete(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonShow function as declared in ugui/ugui.c:7434
func UG_ButtonShow(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonShow(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonHide function as declared in ugui/ugui.c:7447
func UG_ButtonHide(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonHide(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetForeColor function as declared in ugui/ugui.c:7466
func UG_ButtonSetForeColor(Wnd *UG_WINDOW, Id UG_U8, Fc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cFc, cFcAllocMap := (C.UG_COLOR)(Fc), cgoAllocsUnknown
	__ret := C.UG_ButtonSetForeColor(cWnd, cId, cFc)
	runtime.KeepAlive(cFcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetBackColor function as declared in ugui/ugui.c:7481
func UG_ButtonSetBackColor(Wnd *UG_WINDOW, Id UG_U8, Bc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cBc, cBcAllocMap := (C.UG_COLOR)(Bc), cgoAllocsUnknown
	__ret := C.UG_ButtonSetBackColor(cWnd, cId, cBc)
	runtime.KeepAlive(cBcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetAlternateForeColor function as declared in ugui/ugui.c:7496
func UG_ButtonSetAlternateForeColor(Wnd *UG_WINDOW, Id UG_U8, Afc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAfc, cAfcAllocMap := (C.UG_COLOR)(Afc), cgoAllocsUnknown
	__ret := C.UG_ButtonSetAlternateForeColor(cWnd, cId, cAfc)
	runtime.KeepAlive(cAfcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetAlternateBackColor function as declared in ugui/ugui.c:7511
func UG_ButtonSetAlternateBackColor(Wnd *UG_WINDOW, Id UG_U8, Abc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAbc, cAbcAllocMap := (C.UG_COLOR)(Abc), cgoAllocsUnknown
	__ret := C.UG_ButtonSetAlternateBackColor(cWnd, cId, cAbc)
	runtime.KeepAlive(cAbcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetText function as declared in ugui/ugui.c:7526
func UG_ButtonSetText(Wnd *UG_WINDOW, Id UG_U8, Str string) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cStr, cStrAllocMap := unpackPCharString(Str)
	__ret := C.UG_ButtonSetText(cWnd, cId, cStr)
	runtime.KeepAlive(cStrAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetFont function as declared in ugui/ugui.c:7542
func UG_ButtonSetFont(Wnd *UG_WINDOW, Id UG_U8, Font_id FONT_ID) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cFont_id, cFont_idAllocMap := (C.FONT_ID)(Font_id), cgoAllocsUnknown
	__ret := C.UG_ButtonSetFont(cWnd, cId, cFont_id)
	runtime.KeepAlive(cFont_idAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetStyle function as declared in ugui/ugui.c:7559
func UG_ButtonSetStyle(Wnd *UG_WINDOW, Id UG_U8, Style UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cStyle, cStyleAllocMap := (C.UG_U8)(Style), cgoAllocsUnknown
	__ret := C.UG_ButtonSetStyle(cWnd, cId, cStyle)
	runtime.KeepAlive(cStyleAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetHSpace function as declared in ugui/ugui.c:7607
func UG_ButtonSetHSpace(Wnd *UG_WINDOW, Id UG_U8, Hs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cHs, cHsAllocMap := (C.UG_S8)(Hs), cgoAllocsUnknown
	__ret := C.UG_ButtonSetHSpace(cWnd, cId, cHs)
	runtime.KeepAlive(cHsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetVSpace function as declared in ugui/ugui.c:7622
func UG_ButtonSetVSpace(Wnd *UG_WINDOW, Id UG_U8, Vs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cVs, cVsAllocMap := (C.UG_S8)(Vs), cgoAllocsUnknown
	__ret := C.UG_ButtonSetVSpace(cWnd, cId, cVs)
	runtime.KeepAlive(cVsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonSetAlignment function as declared in ugui/ugui.c:7637
func UG_ButtonSetAlignment(Wnd *UG_WINDOW, Id UG_U8, Align UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAlign, cAlignAllocMap := (C.UG_U8)(Align), cgoAllocsUnknown
	__ret := C.UG_ButtonSetAlignment(cWnd, cId, cAlign)
	runtime.KeepAlive(cAlignAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ButtonGetForeColor function as declared in ugui/ugui.c:7652
func UG_ButtonGetForeColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetForeColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_ButtonGetBackColor function as declared in ugui/ugui.c:7667
func UG_ButtonGetBackColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetBackColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_ButtonGetAlternateForeColor function as declared in ugui/ugui.c:7682
func UG_ButtonGetAlternateForeColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetAlternateForeColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_ButtonGetAlternateBackColor function as declared in ugui/ugui.c:7697
func UG_ButtonGetAlternateBackColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetAlternateBackColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_ButtonGetText function as declared in ugui/ugui.c:7712
func UG_ButtonGetText(Wnd *UG_WINDOW, Id UG_U8) string {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetText(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// UG_ButtonGetFont function as declared in ugui/ugui.c:7727
func UG_ButtonGetFont(Wnd *UG_WINDOW, Id UG_U8) *UG_FONT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetFont(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := NewUG_FONTRef(unsafe.Pointer(__ret))
	return __v
}

// UG_ButtonGetStyle function as declared in ugui/ugui.c:7742
func UG_ButtonGetStyle(Wnd *UG_WINDOW, Id UG_U8) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetStyle(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_ButtonGetHSpace function as declared in ugui/ugui.c:7757
func UG_ButtonGetHSpace(Wnd *UG_WINDOW, Id UG_U8) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetHSpace(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_ButtonGetVSpace function as declared in ugui/ugui.c:7772
func UG_ButtonGetVSpace(Wnd *UG_WINDOW, Id UG_U8) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetVSpace(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_ButtonGetAlignment function as declared in ugui/ugui.c:7787
func UG_ButtonGetAlignment(Wnd *UG_WINDOW, Id UG_U8) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ButtonGetAlignment(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_CheckboxCreate function as declared in ugui/ugui.c:7955
func UG_CheckboxCreate(Wnd *UG_WINDOW, Chb *UG_CHECKBOX, Id UG_U8, Xs UG_S16, Ys UG_S16, Xe UG_S16, Ye UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cChb, cChbAllocMap := Chb.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	__ret := C.UG_CheckboxCreate(cWnd, cChb, cId, cXs, cYs, cXe, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cXsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cChbAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxDelete function as declared in ugui/ugui.c:7999
func UG_CheckboxDelete(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxDelete(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxShow function as declared in ugui/ugui.c:8004
func UG_CheckboxShow(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxShow(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxHide function as declared in ugui/ugui.c:8017
func UG_CheckboxHide(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxHide(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetCheched function as declared in ugui/ugui.c:8036
func UG_CheckboxSetCheched(Wnd *UG_WINDOW, Id UG_U8, Ch UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cCh, cChAllocMap := (C.UG_U8)(Ch), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetCheched(cWnd, cId, cCh)
	runtime.KeepAlive(cChAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetForeColor function as declared in ugui/ugui.c:8052
func UG_CheckboxSetForeColor(Wnd *UG_WINDOW, Id UG_U8, Fc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cFc, cFcAllocMap := (C.UG_COLOR)(Fc), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetForeColor(cWnd, cId, cFc)
	runtime.KeepAlive(cFcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetBackColor function as declared in ugui/ugui.c:8067
func UG_CheckboxSetBackColor(Wnd *UG_WINDOW, Id UG_U8, Bc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cBc, cBcAllocMap := (C.UG_COLOR)(Bc), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetBackColor(cWnd, cId, cBc)
	runtime.KeepAlive(cBcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetAlternateForeColor function as declared in ugui/ugui.c:8082
func UG_CheckboxSetAlternateForeColor(Wnd *UG_WINDOW, Id UG_U8, Afc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAfc, cAfcAllocMap := (C.UG_COLOR)(Afc), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetAlternateForeColor(cWnd, cId, cAfc)
	runtime.KeepAlive(cAfcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetAlternateBackColor function as declared in ugui/ugui.c:8097
func UG_CheckboxSetAlternateBackColor(Wnd *UG_WINDOW, Id UG_U8, Abc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAbc, cAbcAllocMap := (C.UG_COLOR)(Abc), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetAlternateBackColor(cWnd, cId, cAbc)
	runtime.KeepAlive(cAbcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetText function as declared in ugui/ugui.c:8112
func UG_CheckboxSetText(Wnd *UG_WINDOW, Id UG_U8, Str string) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cStr, cStrAllocMap := unpackPCharString(Str)
	__ret := C.UG_CheckboxSetText(cWnd, cId, cStr)
	runtime.KeepAlive(cStrAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetFont function as declared in ugui/ugui.c:8128
func UG_CheckboxSetFont(Wnd *UG_WINDOW, Id UG_U8, Font_id FONT_ID) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cFont_id, cFont_idAllocMap := (C.FONT_ID)(Font_id), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetFont(cWnd, cId, cFont_id)
	runtime.KeepAlive(cFont_idAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetStyle function as declared in ugui/ugui.c:8146
func UG_CheckboxSetStyle(Wnd *UG_WINDOW, Id UG_U8, Style UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cStyle, cStyleAllocMap := (C.UG_U8)(Style), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetStyle(cWnd, cId, cStyle)
	runtime.KeepAlive(cStyleAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetHSpace function as declared in ugui/ugui.c:8194
func UG_CheckboxSetHSpace(Wnd *UG_WINDOW, Id UG_U8, Hs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cHs, cHsAllocMap := (C.UG_S8)(Hs), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetHSpace(cWnd, cId, cHs)
	runtime.KeepAlive(cHsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetVSpace function as declared in ugui/ugui.c:8209
func UG_CheckboxSetVSpace(Wnd *UG_WINDOW, Id UG_U8, Vs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cVs, cVsAllocMap := (C.UG_S8)(Vs), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetVSpace(cWnd, cId, cVs)
	runtime.KeepAlive(cVsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxSetAlignment function as declared in ugui/ugui.c:8224
func UG_CheckboxSetAlignment(Wnd *UG_WINDOW, Id UG_U8, Align UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAlign, cAlignAllocMap := (C.UG_U8)(Align), cgoAllocsUnknown
	__ret := C.UG_CheckboxSetAlignment(cWnd, cId, cAlign)
	runtime.KeepAlive(cAlignAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_CheckboxGetChecked function as declared in ugui/ugui.c:8239
func UG_CheckboxGetChecked(Wnd *UG_WINDOW, Id UG_U8) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetChecked(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_CheckboxGetForeColor function as declared in ugui/ugui.c:8254
func UG_CheckboxGetForeColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetForeColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_CheckboxGetBackColor function as declared in ugui/ugui.c:8269
func UG_CheckboxGetBackColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetBackColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_CheckboxGetAlternateForeColor function as declared in ugui/ugui.c:8284
func UG_CheckboxGetAlternateForeColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetAlternateForeColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_CheckboxGetAlternateBackColor function as declared in ugui/ugui.c:8299
func UG_CheckboxGetAlternateBackColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetAlternateBackColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_CheckboxGetText function as declared in ugui/ugui.c:8314
func UG_CheckboxGetText(Wnd *UG_WINDOW, Id UG_U8) string {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetText(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// UG_CheckboxGetFont function as declared in ugui/ugui.c:8329
func UG_CheckboxGetFont(Wnd *UG_WINDOW, Id UG_U8) *UG_FONT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetFont(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := NewUG_FONTRef(unsafe.Pointer(__ret))
	return __v
}

// UG_CheckboxGetStyle function as declared in ugui/ugui.c:8344
func UG_CheckboxGetStyle(Wnd *UG_WINDOW, Id UG_U8) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetStyle(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_CheckboxGetHSpace function as declared in ugui/ugui.c:8359
func UG_CheckboxGetHSpace(Wnd *UG_WINDOW, Id UG_U8) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetHSpace(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_CheckboxGetVSpace function as declared in ugui/ugui.c:8374
func UG_CheckboxGetVSpace(Wnd *UG_WINDOW, Id UG_U8) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetVSpace(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_CheckboxGetAlignment function as declared in ugui/ugui.c:8389
func UG_CheckboxGetAlignment(Wnd *UG_WINDOW, Id UG_U8) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_CheckboxGetAlignment(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_TextboxCreate function as declared in ugui/ugui.c:8562
func UG_TextboxCreate(Wnd *UG_WINDOW, Txb *UG_TEXTBOX, Id UG_U8, Xs UG_S16, Ys UG_S16, Xe UG_S16, Ye UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cTxb, cTxbAllocMap := Txb.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	__ret := C.UG_TextboxCreate(cWnd, cTxb, cId, cXs, cYs, cXe, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cXsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cTxbAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxDelete function as declared in ugui/ugui.c:8603
func UG_TextboxDelete(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxDelete(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxShow function as declared in ugui/ugui.c:8608
func UG_TextboxShow(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxShow(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxHide function as declared in ugui/ugui.c:8621
func UG_TextboxHide(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxHide(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetForeColor function as declared in ugui/ugui.c:8634
func UG_TextboxSetForeColor(Wnd *UG_WINDOW, Id UG_U8, Fc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cFc, cFcAllocMap := (C.UG_COLOR)(Fc), cgoAllocsUnknown
	__ret := C.UG_TextboxSetForeColor(cWnd, cId, cFc)
	runtime.KeepAlive(cFcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetBackColor function as declared in ugui/ugui.c:8649
func UG_TextboxSetBackColor(Wnd *UG_WINDOW, Id UG_U8, Bc UG_COLOR) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cBc, cBcAllocMap := (C.UG_COLOR)(Bc), cgoAllocsUnknown
	__ret := C.UG_TextboxSetBackColor(cWnd, cId, cBc)
	runtime.KeepAlive(cBcAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetText function as declared in ugui/ugui.c:8664
func UG_TextboxSetText(Wnd *UG_WINDOW, Id UG_U8, Str string) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cStr, cStrAllocMap := unpackPCharString(Str)
	__ret := C.UG_TextboxSetText(cWnd, cId, cStr)
	runtime.KeepAlive(cStrAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetFont function as declared in ugui/ugui.c:8680
func UG_TextboxSetFont(Wnd *UG_WINDOW, Id UG_U8, Font_id FONT_ID) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cFont_id, cFont_idAllocMap := (C.FONT_ID)(Font_id), cgoAllocsUnknown
	__ret := C.UG_TextboxSetFont(cWnd, cId, cFont_id)
	runtime.KeepAlive(cFont_idAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetHSpace function as declared in ugui/ugui.c:8698
func UG_TextboxSetHSpace(Wnd *UG_WINDOW, Id UG_U8, Hs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cHs, cHsAllocMap := (C.UG_S8)(Hs), cgoAllocsUnknown
	__ret := C.UG_TextboxSetHSpace(cWnd, cId, cHs)
	runtime.KeepAlive(cHsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetVSpace function as declared in ugui/ugui.c:8713
func UG_TextboxSetVSpace(Wnd *UG_WINDOW, Id UG_U8, Vs UG_S8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cVs, cVsAllocMap := (C.UG_S8)(Vs), cgoAllocsUnknown
	__ret := C.UG_TextboxSetVSpace(cWnd, cId, cVs)
	runtime.KeepAlive(cVsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxSetAlignment function as declared in ugui/ugui.c:8728
func UG_TextboxSetAlignment(Wnd *UG_WINDOW, Id UG_U8, Align UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cAlign, cAlignAllocMap := (C.UG_U8)(Align), cgoAllocsUnknown
	__ret := C.UG_TextboxSetAlignment(cWnd, cId, cAlign)
	runtime.KeepAlive(cAlignAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_TextboxGetForeColor function as declared in ugui/ugui.c:8743
func UG_TextboxGetForeColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetForeColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_TextboxGetBackColor function as declared in ugui/ugui.c:8758
func UG_TextboxGetBackColor(Wnd *UG_WINDOW, Id UG_U8) UG_COLOR {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetBackColor(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_COLOR)(__ret)
	return __v
}

// UG_TextboxGetText function as declared in ugui/ugui.c:8773
func UG_TextboxGetText(Wnd *UG_WINDOW, Id UG_U8) string {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetText(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// UG_TextboxGetFont function as declared in ugui/ugui.c:8788
func UG_TextboxGetFont(Wnd *UG_WINDOW, Id UG_U8) *UG_FONT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetFont(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := NewUG_FONTRef(unsafe.Pointer(__ret))
	return __v
}

// UG_TextboxGetHSpace function as declared in ugui/ugui.c:8803
func UG_TextboxGetHSpace(Wnd *UG_WINDOW, Id UG_U8) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetHSpace(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_TextboxGetVSpace function as declared in ugui/ugui.c:8818
func UG_TextboxGetVSpace(Wnd *UG_WINDOW, Id UG_U8) UG_S8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetVSpace(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_S8)(__ret)
	return __v
}

// UG_TextboxGetAlignment function as declared in ugui/ugui.c:8833
func UG_TextboxGetAlignment(Wnd *UG_WINDOW, Id UG_U8) UG_U8 {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_TextboxGetAlignment(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_U8)(__ret)
	return __v
}

// UG_ImageCreate function as declared in ugui/ugui.c:8919
func UG_ImageCreate(Wnd *UG_WINDOW, Img *UG_IMAGE, Id UG_U8, Xs UG_S16, Ys UG_S16, Xe UG_S16, Ye UG_S16) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cImg, cImgAllocMap := Img.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cXs, cXsAllocMap := (C.UG_S16)(Xs), cgoAllocsUnknown
	cYs, cYsAllocMap := (C.UG_S16)(Ys), cgoAllocsUnknown
	cXe, cXeAllocMap := (C.UG_S16)(Xe), cgoAllocsUnknown
	cYe, cYeAllocMap := (C.UG_S16)(Ye), cgoAllocsUnknown
	__ret := C.UG_ImageCreate(cWnd, cImg, cId, cXs, cYs, cXe, cYe)
	runtime.KeepAlive(cYeAllocMap)
	runtime.KeepAlive(cXeAllocMap)
	runtime.KeepAlive(cYsAllocMap)
	runtime.KeepAlive(cXsAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cImgAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ImageDelete function as declared in ugui/ugui.c:8953
func UG_ImageDelete(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ImageDelete(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ImageShow function as declared in ugui/ugui.c:8958
func UG_ImageShow(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ImageShow(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ImageHide function as declared in ugui/ugui.c:8971
func UG_ImageHide(Wnd *UG_WINDOW, Id UG_U8) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	__ret := C.UG_ImageHide(cWnd, cId)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}

// UG_ImageSetBMP function as declared in ugui/ugui.c:8984
func UG_ImageSetBMP(Wnd *UG_WINDOW, Id UG_U8, Bmp *UG_BMP) UG_RESULT {
	cWnd, cWndAllocMap := Wnd.PassRef()
	cId, cIdAllocMap := (C.UG_U8)(Id), cgoAllocsUnknown
	cBmp, cBmpAllocMap := Bmp.PassRef()
	__ret := C.UG_ImageSetBMP(cWnd, cId, cBmp)
	runtime.KeepAlive(cBmpAllocMap)
	runtime.KeepAlive(cIdAllocMap)
	runtime.KeepAlive(cWndAllocMap)
	__v := (UG_RESULT)(__ret)
	return __v
}
